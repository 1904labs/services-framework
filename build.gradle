buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'checkstyle'
    apply plugin: 'findbugs'
    apply plugin: 'maven'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'
    apply plugin: 'distribution'

    version = '0.1.1-SNAPSHOT'
    group = 'io.tsdb.services'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    String pomGroup = project.group
    String pomRepositoryUrl = 'scm:git:https://github.com/inst-tech/services-framework.git'
    String pomScmUrl = 'https://github.com/inst-tech/services-framework'
    String pomDescription = 'tsdb.io services framework'
    String pomLicenseName = 'The Apache License, Version 2.0'
    String pomLicenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
    String pomDeveloperId = 'johann8384'
    String pomDeveloperEmail = 'jonathan.creasy@gmail.com'
    String pomDeveloperName = 'Jonathan Creasy'

    String pomName = project.name
    archivesBaseName = project.name

    description = 'tsdb.io Services Framework'

    ext {
        jettyVersion = '9.4.8.v20171121'
        jerseyVersion = '2.26'
        guiceVersion = '4.1.0'
        resteasyVersion = '3.1.4.Final'
        dropwizardVersion = '4.0.2'
        logbackVersion = '1.2.3'
        slf4jVersion = '1.7.25'
        shiroVersion = '1.4.0'
        ossrhUsername = project.hasProperty('ossrhUsername') ? project.getProperty('ossrhUsername') : ''
        ossrhPassword = project.hasProperty('ossrhPassword') ? project.getProperty('ossrhPassword') : ''
    }

    repositories {
        flatDir {
            dirs 'libs'
        }
        mavenLocal()
        jcenter()
        mavenCentral()
    }

    findbugsMain {
        reports {
            xml.enabled = true
            html.enabled = false
        }
        ignoreFailures = true
    }

    findbugsTest {
        reports {
            xml.enabled = true
            html.enabled = false
        }
        ignoreFailures = true
    }

    checkstyle {
        configFile = rootProject.file('checkstyle/checkstyle.xml')
        showViolations = false
        checkstyleMain.exclude '**/gensrc/**'
    }

    task('printVersion') {
        doLast {
            println project.version
        }
    }

    task javadocJar(type: Jar) {
        classifier = 'javadoc'
        from javadoc
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    artifacts {
        archives javadocJar, sourcesJar
    }

    signing {
        useGpgCmd()
        sign configurations.archives
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
            }
        }
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: ${rootProject.ext.ossrhUsername}, password: ${rootProject.ext.ossrhPassword})
                }

                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                    authentication(userName: ${rootProject.ext.ossrhUsername}, password: ${rootProject.ext.ossrhPassword})
                }

                pom.project {
                    name pomName
                    description pomDescription
                    url pomRepositoryUrl
                    version version
                    groupId pomGroup
                    artifactId pomName
                    packaging 'jar'
                    scm {
                        connection pomScmUrl
                        developerConnection pomScmUrl
                        url pomScmUrl
                    }
                    licenses {
                        license {
                            name pomLicenseName
                            url pomLicenseUrl
                            distribution 'repo'
                        }
                    }

                    developers {
                        developer {
                            id pomDeveloperId
                            name pomDeveloperName
                            email pomDeveloperEmail
                        }
                    }
                }
            }
        }
    }
}

// Because if one does not want to release and
// therefore does not have gradle.properties
// the whole build will fail because the uploadArchives
// is being evaluated and sonatypeUsername
// and sonatypePassword is not going to be present
// using '<<' in uploadArchives could be an option,
// but it is deprecated in gradle 3.4
def getSonatypeProperty(String name) {
    name = 'ossrh' + name.capitalize()
    if (project.hasProperty(name)) {
        return project.getProperties()[name]
    } else {
        return ''
    }
}

task copyJars(type: Copy) {
    from subprojects.collect { it.tasks.withType(Jar) }
    into "$buildDir/install/lib"
}

task assembleBinary(type: Copy) {
    from "${rootProject.projectDir}/src/main/dist/run"
    into "${rootProject.buildDir}/install/bin/"
}

/*
 * Note, do NOT remove the exclude *.properties, we do not want centralstation.properties or other random
 * property files from our code getting deployed in a build.
 * Please manually include a properties file you want to distribute, not, doing this is probably a red-flag and
 * the best practie will probably be to update the production centralstation.properties managed by Puppet.
 */

subprojects {
    task assembleDistBin(dependsOn: assembleBinary, type: Copy) {
        from "${project.buildDir}/install/${project.name}/bin/${project.name}"
        into "${rootProject.buildDir}/install/bin/"
    }

    task assembleDistLibs(type: Copy) {
        from "${project.buildDir}/install/${project.name}/lib/"
        include '*.jar'
        into "${rootProject.buildDir}/install/lib/"
    }

    task assembleDistConfig(type: Copy) {
        from "${project.projectDir}/src/main/resources/"
        exclude 'application.properties'
        include '*.xml'
        include '*.properties'
        into "${rootProject.buildDir}/install/config/"
    }
}

project(':framework-base') {
    dependencies {
        compile group: 'io.tsdb.services', name: 'framework-common', version: '0.1.1-SNAPSHOT'
        compile group: 'org.eclipse.jetty', name: 'jetty-server', version: "${rootProject.ext.jettyVersion}"
        compile group: 'org.eclipse.jetty', name: 'jetty-servlet', version: "${rootProject.ext.jettyVersion}"
        compile group: 'org.eclipse.jetty', name: 'apache-jsp', version: "${rootProject.ext.jettyVersion}"
        compile group: 'jstl', name: 'jstl', version: '1.2'
        compile group: 'org.jboss.resteasy', name: 'resteasy-jaxrs', version: "${rootProject.ext.resteasyVersion}"
        compile group: 'org.jboss.resteasy', name: 'resteasy-guice', version: "${rootProject.ext.resteasyVersion}"
        compile group: 'org.jboss.resteasy', name: 'resteasy-jackson-provider', version: "${rootProject.ext.resteasyVersion}"
        compile group: 'javax.servlet', name: 'javax.servlet-api', version: '3.0.1'
        compile group: 'io.dropwizard.metrics', name: 'metrics-servlets', version: "${rootProject.ext.dropwizardVersion}"
        compile group: 'io.dropwizard.metrics', name: 'metrics-jetty9', version: "${rootProject.ext.dropwizardVersion}"
        compile group: 'com.google.inject.extensions', name: 'guice-servlet', version: "${rootProject.ext.guiceVersion}"
        compile group: 'com.google.inject.extensions', name: 'guice-assistedinject', version: "${rootProject.ext.guiceVersion}"
        compile group: 'com.google.inject.extensions', name: 'guice-multibindings', version: "${rootProject.ext.guiceVersion}"
        compile group: 'org.apache.shiro', name: 'shiro-web', version: "${rootProject.ext.shiroVersion}"
        compile group: 'org.apache.shiro', name: 'shiro-crypto-core', version: '1.4.0'
        compile(group: 'org.apache.shiro', name: 'shiro-guice', version: "${rootProject.ext.shiroVersion}") {
            exclude group: 'com.google.inject', module: 'guice'
            exclude group: 'com.google.inject.extensions', module: 'guice-multibindings'
            exclude group: 'com.google.inject.extensions', module: 'guice-assistedinject'
        }
        compile group: 'org.reflections', name: 'reflections', version: '0.9.11'
        // https://mvnrepository.com/artifact/io.zipkin.brave/brave-http
        compile group: 'io.zipkin.brave', name: 'brave-http', version: '4.13.4'
        // https://mvnrepository.com/artifact/io.zipkin.java/zipkin
        compile group: 'io.zipkin.java', name: 'zipkin', version: '2.5.0'
        // https://mvnrepository.com/artifact/io.zipkin.zipkin2/zipkin-storage-elasticsearch
        compile group: 'io.zipkin.zipkin2', name: 'zipkin-storage-elasticsearch', version: '2.5.0'
    }
}

project ('framework-common') {
    dependencies {
        compile group: 'io.dropwizard.metrics', name: 'metrics-core', version: "${rootProject.ext.dropwizardVersion}"
        compile group: 'io.dropwizard.metrics', name: 'metrics-jvm', version: "${rootProject.ext.dropwizardVersion}"
        compile group: 'io.dropwizard.metrics', name: 'metrics-graphite', version: "${rootProject.ext.dropwizardVersion}"
        compile group: 'io.dropwizard.metrics', name: 'metrics-servlets', version: "${rootProject.ext.dropwizardVersion}"
        compile group: 'io.dropwizard.metrics', name: 'metrics-jetty9', version: "${rootProject.ext.dropwizardVersion}"
        compile group: 'io.dropwizard.metrics', name: 'metrics-logback', version: "${rootProject.ext.dropwizardVersion}"
        compile group: 'ch.qos.logback', name: 'logback-classic', version: "${rootProject.ext.logbackVersion}"
        compile group: 'ch.qos.logback', name: 'logback-access', version: "${rootProject.ext.logbackVersion}"
        compile group: 'net.logstash.logback', name: 'logstash-logback-encoder', version: '4.11'
        compile group: 'org.slf4j', name: 'slf4j-api', version: "${rootProject.ext.slf4jVersion}"
        compile group: 'org.slf4j', name: 'jul-to-slf4j', version: "${rootProject.ext.slf4jVersion}"
        compile group: 'com.google.guava', name: 'guava', version: '18.0'
        compile group: 'com.google.code.gson', name: 'gson', version: '2.8.2'
        compile group: 'org.apache.commons', name: 'commons-configuration2', version: '2.2'
        compile group: 'com.orbitz.consul', name: 'consul-client', version: '1.0.1'
        testCompile(group: 'junit', name: 'junit', version: '4.12') {
            exclude(module: 'hamcrest-core')
        }
        testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
    }
}